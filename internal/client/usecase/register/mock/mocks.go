// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ilya-rusyanov/gophkeeper/internal/client/usecase/register (interfaces: Servicer,CredentialsStorager)
//
// Generated by this command:
//
//	mockgen -package mock -destination ./internal/client/usecase/register/mock/mocks.go github.com/ilya-rusyanov/gophkeeper/internal/client/usecase/register Servicer,CredentialsStorager
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServicer is a mock of Servicer interface.
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer.
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance.
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockServicer) Register(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockServicerMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockServicer)(nil).Register), arg0, arg1)
}

// MockCredentialsStorager is a mock of CredentialsStorager interface.
type MockCredentialsStorager struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialsStoragerMockRecorder
}

// MockCredentialsStoragerMockRecorder is the mock recorder for MockCredentialsStorager.
type MockCredentialsStoragerMockRecorder struct {
	mock *MockCredentialsStorager
}

// NewMockCredentialsStorager creates a new mock instance.
func NewMockCredentialsStorager(ctrl *gomock.Controller) *MockCredentialsStorager {
	mock := &MockCredentialsStorager{ctrl: ctrl}
	mock.recorder = &MockCredentialsStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialsStorager) EXPECT() *MockCredentialsStoragerMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockCredentialsStorager) Store(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockCredentialsStoragerMockRecorder) Store(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockCredentialsStorager)(nil).Store), arg0, arg1)
}
