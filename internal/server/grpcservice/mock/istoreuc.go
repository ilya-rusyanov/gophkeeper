// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ilya-rusyanov/gophkeeper/internal/server/grpcservice (interfaces: IStoreUC)
//
// Generated by this command:
//
//	mockgen -destination ./mock/istoreuc.go -package mock . IStoreUC
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/ilya-rusyanov/gophkeeper/internal/server/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIStoreUC is a mock of IStoreUC interface.
type MockIStoreUC struct {
	ctrl     *gomock.Controller
	recorder *MockIStoreUCMockRecorder
}

// MockIStoreUCMockRecorder is the mock recorder for MockIStoreUC.
type MockIStoreUCMockRecorder struct {
	mock *MockIStoreUC
}

// NewMockIStoreUC creates a new mock instance.
func NewMockIStoreUC(ctrl *gomock.Controller) *MockIStoreUC {
	mock := &MockIStoreUC{ctrl: ctrl}
	mock.recorder = &MockIStoreUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStoreUC) EXPECT() *MockIStoreUCMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockIStoreUC) Store(arg0 context.Context, arg1 *entity.StoreIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockIStoreUCMockRecorder) Store(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockIStoreUC)(nil).Store), arg0, arg1)
}
